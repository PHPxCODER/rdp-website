// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscriber {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  token       String   @unique @default(uuid())
  tokenExpiry DateTime @default(now()) // Set expiry time
  createdAt   DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  phoneNumber   String?   // Add the phone number field here
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime @updatedAt
  Account       Account[]
  Session       Session[]
  applications JobApplication[]
  image         String?
}

model JobListing {
  id          String   @id @default(cuid())
  title       String
  department  String
  location    String
  description String    @db.Text
  requirements String[] 
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  applications JobApplication[]
}

model JobApplication {
  id          String   @id @default(cuid())
  jobId       String
  job         JobListing @relation(fields: [jobId], references: [id])
  userId      String?
  user        User?    @relation(fields: [id], references: [id])
  fullName    String
  email       String
  phone       String?
  coverLetter String?   @db.Text
  resumeUrl   String?
  status      String    @default("pending") // pending, reviewed, interviewed, rejected, accepted
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}


enum Role {
  USER
  MGMT
  ADMIN
}